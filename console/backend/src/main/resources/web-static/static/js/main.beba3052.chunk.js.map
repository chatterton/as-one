{"version":3,"sources":["logger.js","SensorData.jsx","hooks.js","App.jsx","serviceWorker.js","index.jsx"],"names":["logger","error","value","console","log","SensorData","URL_LATEST","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","series","setSeries","makeUnixDate","seconds","nanos","millis","_pollServerAndUpdate","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","get","sent","t0","stop","apply","this","arguments","useEffect","seriesData","name","columns","points","length","reversed","reverse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","reading","point","time","timestamp","push","s1","s2","s3","s4","err","return","TimeSeries","timerange","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","pollServerAndUpdate","react_default","createElement","Fragment","entry","timeRange","width","height","showGrid","label","min","max","type","format","axis","style","stroke","opacity","App","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.beba3052.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// TODO: Replace this with a real logger, I suppose\n\nconst logger = {\n\n  error (value) {\n    console.error(value)\n  },\n\n  log (value) {\n    console.log(value)\n  }\n\n}\n\nexport default logger\n","import React, { useState, useEffect } from 'react'\nimport { useInterval } from './hooks'\nimport axios from 'axios'\nimport logger from './logger'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries } from 'pondjs'\n\nfunction SensorData () {\n  const URL_LATEST = '/sensors/latest'\n\n  let [data, setData] = useState([])\n  let [loading, setLoading] = useState(true)\n  let [series, setSeries] = useState(null)\n\n  function makeUnixDate (seconds, nanos) {\n    var millis = seconds * 1000\n    millis += nanos / 1000000\n    return millis\n  }\n\n  useEffect(() => {\n    let seriesData = {\n      name: 'readings',\n      columns: ['time', 's1', 's2', 's3', 's4'],\n      points: []\n    }\n    if (data.length > 0) {\n      let reversed = data.reverse()\n      for (var reading of reversed) {\n        let point = []\n        let time = makeUnixDate(reading.timestamp.seconds, reading.timestamp.nanos)\n        point.push(time)\n        point.push(reading.s1)\n        point.push(reading.s2)\n        point.push(reading.s3)\n        point.push(reading.s4)\n        seriesData.points.push(point)\n      }\n      let series = new TimeSeries(seriesData)\n      logger.log(series)\n      logger.log(series.timerange())\n      setSeries(series)\n    }\n  }, [data])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(URL_LATEST)\n      setData(response.data)\n      setLoading(false)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 250)\n\n  const style = {\n    s1: {\n      stroke: '#a02c2c',\n      opacity: 0.5\n    },\n    s2: {\n      stroke: '#a03c3c',\n      opacity: 0.5\n    },\n    s3: {\n      stroke: '#a04c4c',\n      opacity: 0.5\n    },\n    s4: {\n      stroke: '#a05c5c',\n      opacity: 0.5\n    }\n  }\n\n  return (\n    <>\n      { loading || (series == null) ? ('Loading ...') : (\n\n        <ChartContainer\n          timeRange={series.timerange()}\n          width={800}\n        >\n          <ChartRow height='300' showGrid>\n            <YAxis id='axis1' label='' min={300} max={800} width='80' type='linear' format='.0f' />\n            <Charts>\n              <LineChart axis='axis1' series={series} columns={['s1', 's2', 's3', 's4']} style={style} />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n      )}\n    </>\n  )\n}\n\nexport { SensorData }\n","import { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport logger from './logger'\n\n// via https://stackoverflow.com/questions/56197689/hook-doesnt-rerender-component\n// and https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\nfunction useFetch (url) {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchUrl () {\n      try {\n        const response = await axios.get(url)\n        setData(response.data)\n        setLoading(false)\n      } catch (error) {\n        logger.error(error)\n      }\n    }\n\n    fetchUrl()\n  }, [url])\n  return [data, loading]\n}\n\n// via https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nfunction useInterval (callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick () {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport { useFetch, useInterval }\n","import React from 'react'\nimport './App.css'\nimport { SensorData } from './SensorData'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <SensorData />\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}