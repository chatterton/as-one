{"version":3,"sources":["logger.js","hooks.js","SensorData.jsx","SensorMonitor.jsx","MqttIndicator.jsx","ScoreboardEmulator.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["logger","error","value","console","log","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","SensorData","props","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","series","setSeries","makeUnixDate","seconds","nanos","millis","_pollServerAndUpdate","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","get","url","sent","t0","stop","apply","this","arguments","seriesData","name","columns","points","length","reversed","reverse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","reading","point","time","timestamp","push","s1","s2","s3","s4","err","return","TimeSeries","pollServerAndUpdate","react_default","createElement","Fragment","entry","timeRange","timerange","width","height","showGrid","min","max","type","format","axis","style","stroke","opacity","SENSOR_LIST_URL","SensorMonitor","sensorList","setSensorList","map","sensorName","Row_default","key","Col_default","md","lg","MqttIndicator","address","topic","emoji","blinking","setBlinking","started","setStarted","_subscribe","mqtt","AsyncClient","connect","subscribe","on","className","role","aria-label","SCOREBOARD_WIDTH","SCOREBOARD_HEIGHT","GREYISH_BLACK","DEFAULT_TINY_WIDTH_PX","ScoreboardEmulator","leds","setLeds","board","setBoard","_useState7","_useState8","checkedWidth","setCheckedWidth","_useClientRect","rect","setRect","useCallback","node","update","getBoundingClientRect","window","addEventListener","removeEventListener","useClientRect","_useClientRect2","ref","_locationToKey","x","y","_pixelSize","divWidth","_","message","processedArray","i","newColor","r","g","b","toString","slice","pixelSize","index","scoreboardAddressTable","replacement","ReactKonva","fill","newCheckedWidth","screen","column","j","pixel","flat","mqttAddress","location","hostname","App","scoreboardOpen","setScoreboardOpen","Container_default","fluid","Navbar_default","expand","variant","bg","marginBottom","Brand","href","backgroundColor","onClick","Collapse_default","in","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4dbac82a.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// TODO: Replace this with a real logger, I suppose\n\nconst logger = {\n\n  error (value) {\n    console.error(value)\n  },\n\n  log (value) {\n    console.log(value)\n  }\n\n}\n\nexport default logger\n","import { useState, useEffect, useRef, useCallback } from 'react'\nimport axios from 'axios'\nimport logger from './logger'\n\n// via https://stackoverflow.com/questions/56197689/hook-doesnt-rerender-component\n// and https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\nfunction useFetch (url) {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchUrl () {\n      try {\n        const response = await axios.get(url)\n        setData(response.data)\n        setLoading(false)\n      } catch (error) {\n        logger.error(error)\n      }\n    }\n\n    fetchUrl()\n  }, [url])\n  return [data, loading]\n}\n\n// via https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nfunction useInterval (callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick () {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\n// via https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n// hacked to attend to window resize events\nfunction useClientRect () {\n  const [rect, setRect] = useState(null)\n\n  const ref = useCallback(node => {\n    function update () {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect())\n      }\n    }\n    window.addEventListener('resize', update)\n    update()\n\n    return () => {\n      window.removeEventListener('resize', update)\n    }\n  }, [])\n\n  return [rect, ref]\n}\n\nexport { useFetch, useInterval, useClientRect }\n","import React, { useState, useEffect } from 'react'\nimport { useInterval } from './hooks'\nimport axios from 'axios'\nimport logger from './logger'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries } from 'pondjs'\nimport PropTypes from 'prop-types'\n\nSensorData.propTypes = {\n  url: PropTypes.string.isRequired\n}\n\nfunction SensorData (props) {\n  let [data, setData] = useState([])\n  let [loading, setLoading] = useState(true)\n  let [series, setSeries] = useState(null)\n\n  function makeUnixDate (seconds, nanos) {\n    var millis = seconds * 1000\n    millis += nanos / 1000000\n    return millis\n  }\n\n  useEffect(() => {\n    let seriesData = {\n      name: 'readings',\n      columns: ['time', 's1', 's2', 's3', 's4'],\n      points: []\n    }\n    if (data.length > 0) {\n      let reversed = data.reverse()\n      for (var reading of reversed) {\n        let point = []\n        let time = makeUnixDate(reading.timestamp.seconds, reading.timestamp.nanos)\n        point.push(time)\n        point.push(reading.s1)\n        point.push(reading.s2)\n        point.push(reading.s3)\n        point.push(reading.s4)\n        seriesData.points.push(point)\n      }\n      let series = new TimeSeries(seriesData)\n      setSeries(series)\n    }\n  }, [data])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(props.url)\n      setData(response.data)\n      setLoading(false)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 250)\n\n  const style = {\n    s1: {\n      stroke: '#a02c2c',\n      opacity: 0.5\n    },\n    s2: {\n      stroke: '#b03c3c',\n      opacity: 0.5\n    },\n    s3: {\n      stroke: '#c04c4c',\n      opacity: 0.5\n    },\n    s4: {\n      stroke: '#d05c5c',\n      opacity: 0.5\n    }\n  }\n\n  return (\n    <>\n      { loading || (series == null) ? ('Loading ...') : (\n        <ChartContainer timeRange={series.timerange()} width={668}>\n          <ChartRow height='300' showGrid>\n            <YAxis id='axis1' min={300} max={650} width={28} type='linear' format='.0f' />\n            <Charts>\n              <LineChart axis='axis1' series={series} columns={['s1', 's2', 's3', 's4']} style={style} />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n      )}\n    </>\n  )\n}\n\nexport { SensorData }\n","import React, { useState } from 'react'\nimport { useInterval } from './hooks'\nimport axios from 'axios'\nimport logger from './logger'\nimport { SensorData } from './SensorData'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst SENSOR_LIST_URL = '/sensors'\n\nfunction SensorMonitor () {\n  let [sensorList, setSensorList] = useState([])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(SENSOR_LIST_URL)\n      setSensorList(response.data)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 1000)\n\n  return (\n    sensorList.map(sensorName =>\n      <Row key={sensorName}>\n        <Col md={0} lg={1} />\n        <Col>\n          <SensorData url={'/sensors/' + sensorName} />\n        </Col>\n        <Col md={0} lg={1} />\n      </Row>\n    )\n  )\n}\n\nexport { SensorMonitor }\n","import React, { useState, useEffect } from 'react'\nimport './Indicators.scss'\nimport logger from './logger'\nimport PropTypes from 'prop-types'\nimport useInterval from '@restart/hooks/useInterval'\nimport AsyncClient from 'async-mqtt'\n\nfunction MqttIndicator (props) {\n  const address = props.address\n  const topic = props.topic\n  const emoji = props.emoji\n\n  let [blinking, setBlinking] = useState(false)\n  let [started, setStarted] = useState(false)\n\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe(topic)\n        logger.log('subscribed mqttindicator ' + emoji + ' to topic ' + topic)\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      // blink when a message comes in\n      mqtt.on('message', function () {\n        setBlinking(true)\n      })\n    }\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [address, started, topic, emoji])\n\n  // de-blink the indicator routinely\n  useInterval(() => {\n    setBlinking(false)\n  }, 50)\n\n  return (\n    <div className={blinking ? 'indicator-blink' : 'indicator'}>\n      <span role='img' aria-label='MQTT'>{emoji}</span>\n    </div>\n  )\n}\n\nMqttIndicator.propTypes = {\n  address: PropTypes.string,\n  topic: PropTypes.string,\n  emoji: PropTypes.string\n}\n\nexport { MqttIndicator }\n","import React, { useState, useEffect } from 'react'\nimport logger from './logger'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer, Rect } from 'react-konva'\nimport { useClientRect } from './hooks'\nimport scoreboardAddressTable from './scoreboard-lookup.json'\nimport AsyncClient from 'async-mqtt'\n\nconst SCOREBOARD_WIDTH = 31\nconst SCOREBOARD_HEIGHT = 10\nconst GREYISH_BLACK = '#222222'\nconst DEFAULT_TINY_WIDTH_PX = 200\n\nfunction ScoreboardEmulator (props) {\n  const address = props.address\n\n  let [started, setStarted] = useState(false)\n  let [leds, setLeds] = useState([])\n  let [board, setBoard] = useState([])\n  let [checkedWidth, setCheckedWidth] = useState(DEFAULT_TINY_WIDTH_PX)\n  let [rect, ref] = useClientRect()\n\n  function _rgbToHex (r, g, b) {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n  }\n\n  function _locationToKey (x, y) {\n    return 'key_' + x + '_' + y\n  }\n\n  function _pixelSize (divWidth) {\n    return divWidth / SCOREBOARD_WIDTH\n  }\n\n  // Should run only at mount time\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe('asOne/score/all/direct')\n        logger.log('subscribed scoreboardemulator')\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      mqtt.on('message', function (_, message) {\n        setLeds(message)\n      })\n    }\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [started, address])\n\n  // Runs whenever new raw values are set. Updates the existing screen\n  useEffect(() => {\n    if (leds) {\n      // First, process the incoming rgb values into an array of hex triplets\n      const processedArray = []\n      for (var i = 0; i < leds.length; i += 3) {\n        const brightnessPercentage = (leds[i] + leds[i + 1] + leds[i + 2]) / (255 * 3)\n        // Magic number threshold below which the pixel will be shown as dim grey\n        if (brightnessPercentage > 0.1) {\n          const newColor = _rgbToHex(leds[i], leds[i + 1], leds[i + 2])\n          processedArray.push(newColor)\n        } else {\n          processedArray.push(GREYISH_BLACK)\n        }\n      }\n\n      // Then, use those to update the board\n      const pixelSize = _pixelSize(checkedWidth)\n      processedArray.map(function (value, index) {\n        const x = scoreboardAddressTable[index].x\n        const y = scoreboardAddressTable[index].y\n        const replacement = <Rect\n          x={pixelSize * x}\n          y={pixelSize * y}\n          width={pixelSize}\n          height={pixelSize}\n          fill={value}\n          key={_locationToKey(x, y)} />\n        board[x][y] = replacement\n        return value\n      })\n      setBoard(board)\n    }\n  }, [leds, board, checkedWidth])\n\n  // Runs whenever the screen is resized. Sets the width we're rendering to\n  // and creates a screen using that size\n  useEffect(() => {\n    // tiny default so that we don't ever end up with a null screen\n    var newCheckedWidth = 200\n    if (rect) {\n      newCheckedWidth = rect.width\n    }\n    setCheckedWidth(newCheckedWidth)\n\n    // using that value, create the board\n    const pixelSize = _pixelSize(newCheckedWidth)\n    const screen = []\n    for (var i = 0; i < SCOREBOARD_WIDTH; i++) {\n      const column = []\n      for (var j = 0; j < SCOREBOARD_HEIGHT; j++) {\n        const pixel = <Rect x={pixelSize * i} y={pixelSize * j} width={pixelSize} height={pixelSize} fill={GREYISH_BLACK} key={_locationToKey(i, j)} />\n        column.push(pixel)\n      }\n      screen.push(column)\n    }\n    setBoard(screen)\n  }, [rect])\n\n  return (\n    <div ref={ref}>\n      <Stage width={checkedWidth} height={checkedWidth / 3}>\n        <Layer>\n          { board.flat() }\n        </Layer>\n      </Stage>\n    </div>\n  )\n}\n\nScoreboardEmulator.propTypes = {\n  address: PropTypes.string\n}\n\nexport { ScoreboardEmulator, GREYISH_BLACK }\n","import React, { useState } from 'react'\n\nimport { SensorMonitor } from './SensorMonitor'\nimport { MqttIndicator } from './MqttIndicator'\nimport { ScoreboardEmulator, GREYISH_BLACK } from './ScoreboardEmulator'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Collapse from 'react-bootstrap/Collapse'\n\nconst mqttAddress = 'ws://' + window.location.hostname + ':8181'\n\nfunction App () {\n  let [scoreboardOpen, setScoreboardOpen] = useState(true)\n\n  return (\n    <div className='App'>\n      <Container fluid='true'>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col md={12} lg={10}>\n            <Navbar expand='lg' variant='dark' bg='dark ' style={{ marginBottom: '40px' }}>\n              <Navbar.Brand href='#'>As One</Navbar.Brand>\n              <div className='d-flex ml-auto flex-nowrap'>\n                {/* scoreboard heartbeat */}\n                <MqttIndicator address={mqttAddress} topic='asOne/score/heartbeat' emoji='📺' />\n                <div style={{ width: '10px' }} />\n                {/* all messages, all topics */}\n                <MqttIndicator address={mqttAddress} topic='asOne/#' emoji='📢' />\n              </div>\n            </Navbar>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <SensorMonitor />\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <div className='card' style={{ backgroundColor: GREYISH_BLACK }}>\n              <h4 className='card-header'>\n                <a href='#/' onClick={() => setScoreboardOpen(!scoreboardOpen)}>\n                Scoreboard\n                  <span className='float-right'>▼</span>\n                </a>\n              </h4>\n              <Collapse in={scoreboardOpen}>\n                <div className='card-body'>\n                  <div className='card-text'><ScoreboardEmulator address={mqttAddress} /></div>\n                </div>\n              </Collapse>\n            </div>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// Switch out default bootstrap for the Solar theme -- https://bootswatch.com/solar/\n// import 'bootstrap/dist/css/bootstrap.css'\nimport './bootstrap-solar.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}