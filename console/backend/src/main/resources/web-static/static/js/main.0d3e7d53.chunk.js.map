{"version":3,"sources":["logger.js","hooks.js","SensorData.jsx","SensorMonitor.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["logger","error","value","console","log","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","SensorData","props","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","series","setSeries","makeUnixDate","seconds","nanos","millis","_pollServerAndUpdate","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","get","url","sent","t0","stop","apply","this","arguments","seriesData","name","columns","points","length","reversed","reverse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","reading","point","time","timestamp","push","s1","s2","s3","s4","err","return","TimeSeries","pollServerAndUpdate","react_default","createElement","Fragment","entry","timeRange","timerange","width","height","showGrid","min","max","type","format","axis","style","stroke","opacity","SensorMonitor","SENSOR_LIST_URL","sensorList","setSensorList","map","sensorName","Row_default","key","Col_default","md","lg","App","className","Container_default","fluid","Navbar_default","expand","variant","bg","marginBottom","Brand","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d3e7d53.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// TODO: Replace this with a real logger, I suppose\n\nconst logger = {\n\n  error (value) {\n    console.error(value)\n  },\n\n  log (value) {\n    console.log(value)\n  }\n\n}\n\nexport default logger\n","import { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport logger from './logger'\n\n// via https://stackoverflow.com/questions/56197689/hook-doesnt-rerender-component\n// and https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\nfunction useFetch (url) {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchUrl () {\n      try {\n        const response = await axios.get(url)\n        setData(response.data)\n        setLoading(false)\n      } catch (error) {\n        logger.error(error)\n      }\n    }\n\n    fetchUrl()\n  }, [url])\n  return [data, loading]\n}\n\n// via https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nfunction useInterval (callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick () {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport { useFetch, useInterval }\n","import React, { useState, useEffect } from 'react'\nimport { useInterval } from './hooks'\nimport axios from 'axios'\nimport logger from './logger'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries } from 'pondjs'\nimport PropTypes from 'prop-types'\n\nSensorData.propTypes = {\n  url: PropTypes.string.isRequired\n}\n\nfunction SensorData (props) {\n  let [data, setData] = useState([])\n  let [loading, setLoading] = useState(true)\n  let [series, setSeries] = useState(null)\n\n  function makeUnixDate (seconds, nanos) {\n    var millis = seconds * 1000\n    millis += nanos / 1000000\n    return millis\n  }\n\n  useEffect(() => {\n    let seriesData = {\n      name: 'readings',\n      columns: ['time', 's1', 's2', 's3', 's4'],\n      points: []\n    }\n    if (data.length > 0) {\n      let reversed = data.reverse()\n      for (var reading of reversed) {\n        let point = []\n        let time = makeUnixDate(reading.timestamp.seconds, reading.timestamp.nanos)\n        point.push(time)\n        point.push(reading.s1)\n        point.push(reading.s2)\n        point.push(reading.s3)\n        point.push(reading.s4)\n        seriesData.points.push(point)\n      }\n      let series = new TimeSeries(seriesData)\n      setSeries(series)\n    }\n  }, [data])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(props.url)\n      setData(response.data)\n      setLoading(false)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 250)\n\n  const style = {\n    s1: {\n      stroke: '#a02c2c',\n      opacity: 0.5\n    },\n    s2: {\n      stroke: '#b03c3c',\n      opacity: 0.5\n    },\n    s3: {\n      stroke: '#c04c4c',\n      opacity: 0.5\n    },\n    s4: {\n      stroke: '#d05c5c',\n      opacity: 0.5\n    }\n  }\n\n  return (\n    <>\n      { loading || (series == null) ? ('Loading ...') : (\n        <ChartContainer timeRange={series.timerange()} width={668}>\n          <ChartRow height='300' showGrid>\n            <YAxis id='axis1' min={300} max={650} width={28} type='linear' format='.0f' />\n            <Charts>\n              <LineChart axis='axis1' series={series} columns={['s1', 's2', 's3', 's4']} style={style} />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n      )}\n    </>\n  )\n}\n\nexport { SensorData }\n","import React, { useState, useEffect } from 'react'\nimport { useInterval } from './hooks'\nimport axios from 'axios'\nimport logger from './logger'\nimport { SensorData } from './SensorData'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction SensorMonitor () {\n  const SENSOR_LIST_URL = '/sensors'\n\n  let [sensorList, setSensorList] = useState([])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(SENSOR_LIST_URL)\n      setSensorList(response.data)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 1000)\n\n  useEffect(() => {\n  })\n\n  return (\n    sensorList.map(sensorName =>\n      <Row key={sensorName}>\n        <Col md={0} lg={1} />\n        <Col>\n          <SensorData url={'/sensors/' + sensorName} />\n        </Col>\n        <Col md={0} lg={1} />\n      </Row>\n    )\n  )\n}\n\nexport { SensorMonitor }\n","import React from 'react'\nimport './App.css'\nimport { SensorMonitor } from './SensorMonitor'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Container fluid='true'>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <Navbar expand='lg' variant='dark' bg='dark ' style={{ marginBottom: '40px' }}>\n              <Navbar.Brand href='#'>As One</Navbar.Brand>\n            </Navbar>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <SensorMonitor />\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// Switch out default bootstrap for the Solar theme -- https://bootswatch.com/solar/\n// import 'bootstrap/dist/css/bootstrap.css'\nimport './bootstrap-solar.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}