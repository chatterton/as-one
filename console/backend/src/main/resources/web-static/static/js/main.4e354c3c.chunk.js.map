{"version":3,"sources":["logger.js","hooks.js","SensorData.jsx","SensorMonitor.jsx","MqttIndicator.jsx","ScoreboardEmulator.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["logger","error","value","console","log","DEFAULT_TINY_WIDTH_PX","useCheckedWidth","_useState7","useState","_useState8","Object","slicedToArray","checkedWidth","setCheckedWidth","_useClientRect","_useState5","_useState6","rect","setRect","useCallback","node","update","getBoundingClientRect","window","addEventListener","removeEventListener","useClientRect","_useClientRect2","ref","useEffect","newCheckedWidth","width","SensorData","props","address","name","_useState","Date","valueOf","_useState2","latestNow","setLatestNow","_useState3","Ring","_useState4","data","setData","_useCheckedWidth","_useCheckedWidth2","started","setStarted","position","setPosition","currentBuf","useRef","current","useInterval","dataref","map","reading","push","length","_subscribe","asyncToGenerator","regenerator_default","a","mark","_callee","mqtt","wrap","_context","prev","next","AsyncClient","connect","subscribe","t0","on","_","message","msgString","toString","startsWith","split","point","parseInt","abrupt","close","stop","apply","this","arguments","timeSeries","TimeSeries","columns","points","toArray","lastFewSeconds","TimeRange","react_default","createElement","entry","timeRange","title","height","showGrid","id","min","max","type","format","axis","series","style","s1","stroke","opacity","s2","s3","s4","SENSOR_LIST_URL","SensorMonitor","sensorList","setSensorList","_pollServerAndUpdate","response","axios","get","sent","pollServerAndUpdate","Row_default","sensorName","Col_default","lg","md","key","MqttIndicator","topic","emoji","blinking","setBlinking","className","role","aria-label","SCOREBOARD_WIDTH","SCOREBOARD_HEIGHT","GREYISH_BLACK","ScoreboardEmulator","leds","setLeds","board","setBoard","_locationToKey","x","y","_pixelSize","divWidth","processedArray","i","newColor","r","g","b","slice","pixelSize","index","scoreboardAddressTable","replacement","ReactKonva","fill","screen","column","j","pixel","flat","mqttAddress","location","hostname","App","scoreboardOpen","setScoreboardOpen","sensorMonitorOpen","setSensorMonitorOpen","spacer","Container_default","fluid","Navbar_default","expand","variant","bg","Brand","href","backgroundColor","onClick","Collapse_default","in","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e354c3c.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// TODO: Replace this with a real logger, I suppose\n\nconst logger = {\n\n  error (value) {\n    console.error(value)\n  },\n\n  log (value) {\n    console.log(value)\n  }\n\n}\n\nexport default logger\n","import { useState, useEffect, useCallback } from 'react'\nimport axios from 'axios'\nimport logger from './logger'\n\n// via https://stackoverflow.com/questions/56197689/hook-doesnt-rerender-component\n// and https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\nfunction useFetch (url) {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchUrl () {\n      try {\n        const response = await axios.get(url)\n        setData(response.data)\n        setLoading(false)\n      } catch (error) {\n        logger.error(error)\n      }\n    }\n\n    fetchUrl()\n  }, [url])\n  return [data, loading]\n}\n\n// via https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n// hacked to attend to window resize events\nfunction useClientRect () {\n  const [rect, setRect] = useState(null)\n\n  const ref = useCallback(node => {\n    function update () {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect())\n      }\n    }\n    window.addEventListener('resize', update)\n    update()\n\n    return () => {\n      window.removeEventListener('resize', update)\n    }\n  }, [])\n\n  return [rect, ref]\n}\n\nconst DEFAULT_TINY_WIDTH_PX = 200\nfunction useCheckedWidth () {\n  let [checkedWidth, setCheckedWidth] = useState(DEFAULT_TINY_WIDTH_PX)\n  let [rect, ref] = useClientRect()\n\n  useEffect(() => {\n    // tiny default so that we don't ever end up with a null screen\n    var newCheckedWidth = DEFAULT_TINY_WIDTH_PX\n    if (rect) {\n      newCheckedWidth = rect.width\n    }\n    setCheckedWidth(newCheckedWidth)\n  }, [rect, checkedWidth])\n\n  return [ref, checkedWidth, setCheckedWidth]\n}\n\nexport { useFetch, useClientRect, useCheckedWidth }\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useCheckedWidth } from './hooks'\nimport useInterval from '@restart/hooks/useInterval'\nimport logger from './logger'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries, TimeRange } from 'pondjs'\nimport PropTypes from 'prop-types'\nimport AsyncClient from 'async-mqtt'\nimport Ring from 'ringjs'\n\nSensorData.propTypes = {\n  name: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired\n}\n\nfunction SensorData (props) {\n  const address = props.address\n  const name = props.name\n\n  let [latestNow, setLatestNow] = useState((new Date()).valueOf())\n  let [data, setData] = useState(new Ring(300))\n  let [ref, checkedWidth] = useCheckedWidth()\n  let [started, setStarted] = useState(false)\n  let [position, setPosition] = useState('')\n\n  let bufferRef = useRef([])\n  let currentBuf = bufferRef.current\n\n  // Move new messages from buffer into data state and clear buffer\n  // Clearing is slightly unsafe, but in this application losing a reading\n  // or two is not a big deal\n  useInterval(() => {\n    setData(dataref => {\n      currentBuf.map(reading => dataref.push(reading))\n      return dataref\n    })\n    setLatestNow((new Date()).valueOf())\n    currentBuf.length = 0 // javascript you so crazy\n  }, 100)\n\n  // Initializer. Should only run at mount, but contains a message handler\n  // that pushes all of the state updates into the buffer\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe('asOne/sensor/reading')\n        logger.log('subscribed sensormonitor')\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      mqtt.on('message', (_, message) => {\n        if (message == null) return\n        const msgString = message.toString()\n        if (!msgString.startsWith(name)) return\n        const reading = msgString.split(',')\n        const point = [parseInt(reading[5]), reading[1], reading[2], reading[3], reading[4]]\n        currentBuf.push(point)\n        setPosition(reading[6])\n      })\n\n      return () => {\n        if (mqtt.close) mqtt.close()\n      }\n    }\n\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [started, address, currentBuf, name, setPosition])\n\n  const style = {\n    s1: {\n      stroke: '#a02c2c',\n      opacity: 0.5\n    },\n    s2: {\n      stroke: '#b03c3c',\n      opacity: 0.5\n    },\n    s3: {\n      stroke: '#c04c4c',\n      opacity: 0.5\n    },\n    s4: {\n      stroke: '#d05c5c',\n      opacity: 0.5\n    }\n  }\n\n  const timeSeries = new TimeSeries({\n    name: 'readings',\n    columns: ['time', 's1', 's2', 's3', 's4'],\n    points: data.toArray()\n  })\n\n  const lastFewSeconds = new TimeRange(latestNow - 5000, latestNow)\n\n  return (\n    <div ref={ref}>\n      { (timeSeries == null) ? 'Loading ...' : (\n        <ChartContainer width={checkedWidth} timeRange={lastFewSeconds} title={position + ': ' + props.name}>\n          <ChartRow height={checkedWidth / 3} showGrid>\n            <YAxis id='axis1' min={400} max={600} width={28} type='linear' format='.0f' />\n            <Charts>\n              <LineChart axis='axis1' series={timeSeries} columns={['s1', 's2', 's3', 's4']} style={style} />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n      )}\n    </div>\n  )\n}\n\nexport { SensorData }\n","import React, { useState } from 'react'\nimport useInterval from '@restart/hooks/useInterval'\nimport axios from 'axios'\nimport logger from './logger'\nimport { SensorData } from './SensorData'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport PropTypes from 'prop-types'\n\nconst SENSOR_LIST_URL = '/sensors'\n\nfunction SensorMonitor (props) {\n  const address = props.address\n\n  let [sensorList, setSensorList] = useState([])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(SENSOR_LIST_URL)\n      setSensorList(response.data)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 1000)\n\n  return (\n    <Row>\n      { sensorList.map(sensorName =>\n        <Col lg={6} md key={sensorName}>\n          <SensorData name={sensorName} address={address} />\n        </Col>\n      )}\n    </Row>\n  )\n}\n\nSensorMonitor.propTypes = {\n  address: PropTypes.string\n}\n\nexport { SensorMonitor }\n","import React, { useState, useEffect } from 'react'\nimport './Indicators.scss'\nimport logger from './logger'\nimport PropTypes from 'prop-types'\nimport useInterval from '@restart/hooks/useInterval'\nimport AsyncClient from 'async-mqtt'\n\nfunction MqttIndicator (props) {\n  const address = props.address\n  const topic = props.topic\n  const emoji = props.emoji\n\n  let [blinking, setBlinking] = useState(false)\n  let [started, setStarted] = useState(false)\n\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe(topic)\n        logger.log('subscribed mqttindicator ' + emoji + ' to topic ' + topic)\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      // blink when a message comes in\n      mqtt.on('message', function () {\n        setBlinking(true)\n      })\n    }\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [address, started, topic, emoji])\n\n  // de-blink the indicator routinely\n  useInterval(() => {\n    setBlinking(false)\n  }, 100)\n\n  return (\n    <div className={blinking ? 'indicator-blink' : 'indicator'}>\n      <span role='img' aria-label='MQTT'>{emoji}</span>\n    </div>\n  )\n}\n\nMqttIndicator.propTypes = {\n  address: PropTypes.string,\n  topic: PropTypes.string,\n  emoji: PropTypes.string\n}\n\nexport { MqttIndicator }\n","import React, { useState, useEffect } from 'react'\nimport logger from './logger'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer, Rect } from 'react-konva'\nimport { useCheckedWidth } from './hooks'\nimport scoreboardAddressTable from './scoreboard-lookup.json'\nimport AsyncClient from 'async-mqtt'\n\nconst SCOREBOARD_WIDTH = 31\nconst SCOREBOARD_HEIGHT = 10\nconst GREYISH_BLACK = '#222222'\n\nfunction ScoreboardEmulator (props) {\n  const address = props.address\n\n  let [started, setStarted] = useState(false)\n  let [leds, setLeds] = useState([])\n  let [board, setBoard] = useState([])\n  let [ref, checkedWidth] = useCheckedWidth()\n\n  function _rgbToHex (r, g, b) {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n  }\n\n  function _locationToKey (x, y) {\n    return 'key_' + x + '_' + y\n  }\n\n  function _pixelSize (divWidth) {\n    return divWidth / SCOREBOARD_WIDTH\n  }\n\n  // Should run only at mount time\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe('asOne/score/all/direct')\n        logger.log('subscribed scoreboardemulator')\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      mqtt.on('message', function (_, message) {\n        setLeds(message)\n      })\n    }\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [started, address])\n\n  // Runs whenever new raw values are set. Updates the existing screen\n  useEffect(() => {\n    if (leds) {\n      // First, process the incoming rgb values into an array of hex triplets\n      const processedArray = []\n      for (var i = 0; i < leds.length; i += 3) {\n        const brightnessPercentage = (leds[i] + leds[i + 1] + leds[i + 2]) / (255 * 3)\n        // Magic number threshold below which the pixel will be shown as dim grey\n        if (brightnessPercentage > 0.1) {\n          const newColor = _rgbToHex(leds[i], leds[i + 1], leds[i + 2])\n          processedArray.push(newColor)\n        } else {\n          processedArray.push(GREYISH_BLACK)\n        }\n      }\n\n      // Then, use those to update the board\n      const pixelSize = _pixelSize(checkedWidth)\n      processedArray.map(function (value, index) {\n        const x = scoreboardAddressTable[index].x\n        const y = scoreboardAddressTable[index].y\n        const replacement = <Rect\n          x={pixelSize * x}\n          y={pixelSize * y}\n          width={pixelSize}\n          height={pixelSize}\n          fill={value}\n          key={_locationToKey(x, y)} />\n        board[x][y] = replacement\n        return value\n      })\n      setBoard(board)\n    }\n  }, [leds, board, checkedWidth])\n\n  // Runs whenever the screen is resized. Sets the width we're rendering to\n  // and creates a screen using that size\n  useEffect(() => {\n    // using that value, create the board\n    const pixelSize = _pixelSize(checkedWidth)\n    const screen = []\n    for (var i = 0; i < SCOREBOARD_WIDTH; i++) {\n      const column = []\n      for (var j = 0; j < SCOREBOARD_HEIGHT; j++) {\n        const pixel = <Rect x={pixelSize * i} y={pixelSize * j} width={pixelSize} height={pixelSize} fill={GREYISH_BLACK} key={_locationToKey(i, j)} />\n        column.push(pixel)\n      }\n      screen.push(column)\n    }\n    setBoard(screen)\n  }, [checkedWidth])\n\n  return (\n    <div ref={ref}>\n      <Stage width={checkedWidth} height={checkedWidth / 3}>\n        <Layer>\n          { board.flat() }\n        </Layer>\n      </Stage>\n    </div>\n  )\n}\n\nScoreboardEmulator.propTypes = {\n  address: PropTypes.string\n}\n\nexport { ScoreboardEmulator, GREYISH_BLACK }\n","import React, { useState } from 'react'\n\nimport { SensorMonitor } from './SensorMonitor'\nimport { MqttIndicator } from './MqttIndicator'\nimport { ScoreboardEmulator, GREYISH_BLACK } from './ScoreboardEmulator'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Collapse from 'react-bootstrap/Collapse'\n\nconst mqttAddress = 'ws://' + window.location.hostname + ':8181'\n\nfunction App () {\n  let [scoreboardOpen, setScoreboardOpen] = useState(true)\n  let [sensorMonitorOpen, setSensorMonitorOpen] = useState(true)\n\n  let spacer = <Row style={{ height: '40px' }} />\n\n  return (\n    <div className='App'>\n      <Container fluid='true'>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col md={12} lg={10}>\n            <Navbar expand='lg' variant='dark' bg='dark'>\n              <Navbar.Brand href='#'>As One</Navbar.Brand>\n              <div className='d-flex ml-auto flex-nowrap'>\n                {/* scoreboard heartbeat */}\n                <MqttIndicator address={mqttAddress} topic='asOne/score/heartbeat' emoji='📺' />\n                <div style={{ width: '10px' }} />\n                {/* all messages, all topics */}\n                <MqttIndicator address={mqttAddress} topic='asOne/#' emoji='📢' />\n              </div>\n            </Navbar>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        { spacer }\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <div className='card' style={{ backgroundColor: GREYISH_BLACK }}>\n              <h4 className='card-header'>\n                <a href='#/' onClick={() => setSensorMonitorOpen(!sensorMonitorOpen)}>\n                  Sensors\n                  <span className='float-right'>▼</span>\n                </a>\n              </h4>\n              <Collapse in={sensorMonitorOpen}>\n                <div className='card-body'>\n                  <div className='card-text'>\n                    <SensorMonitor address={mqttAddress} />\n                  </div>\n                </div>\n              </Collapse>\n            </div>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        { spacer }\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <div className='card' style={{ backgroundColor: GREYISH_BLACK }}>\n              <h4 className='card-header'>\n                <a href='#/' onClick={() => setScoreboardOpen(!scoreboardOpen)}>\n                Scoreboard\n                  <span className='float-right'>▼</span>\n                </a>\n              </h4>\n              <Collapse in={scoreboardOpen}>\n                <div className='card-body'>\n                  <div className='card-text'><ScoreboardEmulator address={mqttAddress} /></div>\n                </div>\n              </Collapse>\n            </div>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// Switch out default bootstrap for the Solar theme -- https://bootswatch.com/solar/\n// import 'bootstrap/dist/css/bootstrap.css'\nimport './bootstrap-solar.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}