{"version":3,"sources":["logger.js","hooks.js","SensorData.jsx","SensorMonitor.jsx","SensorFlipper.jsx","MqttIndicator.jsx","FireTest.jsx","ScoreboardEmulator.jsx","Fire.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["logger","error","value","console","log","DEFAULT_TINY_WIDTH_PX","useCheckedWidth","_useState7","useState","_useState8","Object","slicedToArray","checkedWidth","setCheckedWidth","_useClientRect","_useState5","_useState6","rect","setRect","useCallback","node","update","getBoundingClientRect","window","addEventListener","removeEventListener","useClientRect","_useClientRect2","ref","useEffect","newCheckedWidth","width","GRAPH_AREA_PX","SensorData","props","address","name","_useState","Date","valueOf","_useState2","latestNow","setLatestNow","_useState3","Ring","_useState4","data","setData","_useCheckedWidth","_useCheckedWidth2","started","setStarted","position","setPosition","currentBuf","useRef","current","useInterval","dataref","map","reading","push","length","_subscribe","asyncToGenerator","regenerator_default","a","mark","_callee","mqtt","wrap","_context","prev","next","AsyncClient","connect","subscribe","t0","on","_","message","msgString","toString","startsWith","split","point","parseInt","abrupt","close","stop","apply","this","arguments","dataArray","toArray","sum","reduce","accumulator","average","timeSeries","TimeSeries","columns","points","lastFewSeconds","TimeRange","react_default","createElement","entry","timeRange","title","height","showGrid","id","min","max","type","format","axis","series","style","s1","stroke","opacity","s2","s3","s4","SENSOR_LIST_URL","SensorMonitor","sensorList","setSensorList","_pollServerAndUpdate","response","axios","get","sent","pollServerAndUpdate","Row_default","keys","sensorName","Col_default","lg","md","key","SENSOR_FLIP_PATH","SensorFlipper","_postToFlip","post","sm","Button_default","className","whiteSpace","onPointerUp","postToFlip","MqttIndicator","topic","emoji","blinking","setBlinking","role","aria-label","FireTest","mq","setMq","lefty","setLefty","mqttPublish","string","publish","client","label","onPointerDown","SCOREBOARD_WIDTH","SCOREBOARD_HEIGHT","GREYISH_BLACK","ScoreboardEmulator","leds","setLeds","board","setBoard","_locationToKey","x","y","_pixelSize","divWidth","processedArray","i","newColor","r","g","b","slice","pixelSize","index","scoreboardAddressTable","replacement","ReactKonva","fill","screen","column","j","pixel","flat","FIRE_PATH","Fire","_postToFire","postToFire","mqttAddress","location","hostname","App","scoreboardOpen","setScoreboardOpen","sensorMonitorOpen","setSensorMonitorOpen","spacer","Container_default","fluid","Navbar_default","expand","variant","bg","Brand","href","backgroundColor","onClick","Collapse_default","in","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcf74aa9.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// TODO: Replace this with a real logger, I suppose\n\nconst logger = {\n\n  error (value) {\n    console.error(value)\n  },\n\n  log (value) {\n    console.log(value)\n  }\n\n}\n\nexport default logger\n","import { useState, useEffect, useCallback } from 'react'\nimport axios from 'axios'\nimport logger from './logger'\n\n// via https://stackoverflow.com/questions/56197689/hook-doesnt-rerender-component\n// and https://medium.com/@cwlsn/how-to-fetch-data-with-react-hooks-in-a-minute-e0f9a15a44d6\nfunction useFetch (url) {\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchUrl () {\n      try {\n        const response = await axios.get(url)\n        setData(response.data)\n        setLoading(false)\n      } catch (error) {\n        logger.error(error)\n      }\n    }\n\n    fetchUrl()\n  }, [url])\n  return [data, loading]\n}\n\n// via https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n// hacked to attend to window resize events\nfunction useClientRect () {\n  const [rect, setRect] = useState(null)\n\n  const ref = useCallback(node => {\n    function update () {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect())\n      }\n    }\n    window.addEventListener('resize', update)\n    update()\n\n    return () => {\n      window.removeEventListener('resize', update)\n    }\n  }, [])\n\n  return [rect, ref]\n}\n\nconst DEFAULT_TINY_WIDTH_PX = 200\nfunction useCheckedWidth () {\n  let [checkedWidth, setCheckedWidth] = useState(DEFAULT_TINY_WIDTH_PX)\n  let [rect, ref] = useClientRect()\n\n  useEffect(() => {\n    // tiny default so that we don't ever end up with a null screen\n    var newCheckedWidth = DEFAULT_TINY_WIDTH_PX\n    if (rect) {\n      newCheckedWidth = rect.width\n    }\n    setCheckedWidth(newCheckedWidth)\n  }, [rect, checkedWidth])\n\n  return [ref, checkedWidth, setCheckedWidth]\n}\n\nexport { useFetch, useClientRect, useCheckedWidth }\n","import React, { useState, useEffect, useRef } from 'react'\nimport { useCheckedWidth } from './hooks'\nimport useInterval from '@restart/hooks/useInterval'\nimport logger from './logger'\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from 'react-timeseries-charts'\nimport { TimeSeries, TimeRange } from 'pondjs'\nimport PropTypes from 'prop-types'\nimport AsyncClient from 'async-mqtt'\nimport Ring from 'ringjs'\n\nSensorData.propTypes = {\n  name: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired\n}\n\nconst GRAPH_AREA_PX = 125\n\nfunction SensorData (props) {\n  const address = props.address\n  const name = props.name\n\n  let [latestNow, setLatestNow] = useState((new Date()).valueOf())\n  let [data, setData] = useState(new Ring(300))\n  let [ref, checkedWidth] = useCheckedWidth()\n  let [started, setStarted] = useState(false)\n  let [position, setPosition] = useState('')\n\n  let bufferRef = useRef([])\n  let currentBuf = bufferRef.current\n\n  // Move new messages from buffer into data state and clear buffer\n  // Clearing is slightly unsafe, but in this application losing a reading\n  // or two is not a big deal\n  useInterval(() => {\n    setData(dataref => {\n      currentBuf.map(reading => dataref.push(reading))\n      return dataref\n    })\n    setLatestNow((new Date()).valueOf())\n    currentBuf.length = 0 // javascript you so crazy\n  }, 100)\n\n  // Initializer. Should only run at mount, but contains a message handler\n  // that pushes all of the state updates into the buffer\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe('asOne/sensor/reading')\n        logger.log('subscribed sensormonitor')\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      mqtt.on('message', (_, message) => {\n        if (message == null) return\n        const msgString = message.toString()\n        if (!msgString.startsWith(name)) return\n        const reading = msgString.split(',')\n        const point = [parseInt(reading[5]), reading[1], reading[2], reading[3], reading[4]]\n        currentBuf.push(point)\n        setPosition(reading[6])\n      })\n\n      return () => {\n        if (mqtt.close) mqtt.close()\n      }\n    }\n\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [started, address, currentBuf, name, setPosition])\n\n  const style = {\n    s1: {\n      stroke: '#ff0000',\n      opacity: 0.75\n    },\n    s2: {\n      stroke: '#bbffbb',\n      opacity: 0.75\n    },\n    s3: {\n      stroke: '#00bbff',\n      opacity: 0.75\n    },\n    s4: {\n      stroke: '#bbbbbb',\n      opacity: 0.75\n    }\n  }\n\n  const dataArray = data.toArray()\n  const sum = (dataArray.length < 2) ? 1 : dataArray.map(function (value) {\n    return parseInt(value[1]) + parseInt(value[2]) + parseInt(value[3]) + parseInt(value[4])\n  }).reduce(function (accumulator, value) {\n    return accumulator + value\n  })\n  const average = (dataArray.length < 2) ? 1 : (sum / dataArray.length) / 4\n\n  const timeSeries = new TimeSeries({\n    name: 'readings',\n    columns: ['time', 's1', 's2', 's3', 's4'],\n    points: dataArray\n  })\n\n  const lastFewSeconds = new TimeRange(latestNow - 5000, latestNow)\n\n  return (\n    <div ref={ref}>\n      { (timeSeries == null) ? 'Loading ...' : (\n        <ChartContainer width={checkedWidth} timeRange={lastFewSeconds} title={position + ': ' + props.name}>\n          <ChartRow height={checkedWidth / 3} showGrid>\n            <YAxis id='axis1' min={average - GRAPH_AREA_PX} max={average + GRAPH_AREA_PX} width={28} type='linear' format='.0f' />\n            <Charts>\n              <LineChart axis='axis1' series={timeSeries} columns={['s1', 's2', 's3', 's4']} style={style} />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n      )}\n    </div>\n  )\n}\n\nexport { SensorData }\n","import React, { useState } from 'react'\nimport useInterval from '@restart/hooks/useInterval'\nimport axios from 'axios'\nimport logger from './logger'\nimport { SensorData } from './SensorData'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport PropTypes from 'prop-types'\n\nconst SENSOR_LIST_URL = '/sensors'\n\nfunction SensorMonitor (props) {\n  const address = props.address\n\n  let [sensorList, setSensorList] = useState([])\n\n  async function pollServerAndUpdate () {\n    try {\n      const response = await axios.get(SENSOR_LIST_URL)\n      setSensorList(response.data)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  useInterval(() => {\n    pollServerAndUpdate()\n  }, 1000)\n\n  return (\n    <Row>\n      { Object.keys(sensorList).map(sensorName =>\n        <Col lg={6} md key={sensorName}>\n          <SensorData name={sensorName} address={address} />\n        </Col>\n      )}\n    </Row>\n  )\n}\n\nSensorMonitor.propTypes = {\n  address: PropTypes.string\n}\n\nexport { SensorMonitor }\n","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport axios from 'axios'\nimport logger from './logger'\n\nconst SENSOR_FLIP_PATH = '/game/flipSensors'\n\nfunction SensorFlipper () {\n  async function postToFlip () {\n    try {\n      const response = await axios.post(SENSOR_FLIP_PATH)\n      logger.log('flipped sensor: ' + response)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  /* eslint-disable jsx-a11y/accessible-emoji */\n  return (\n    <Row>\n      <Col md={5} sm={0} />\n      <Col sm={2}>\n        <Button\n          className='btn-block'\n          style={{ whiteSpace: 'nowrap' }}\n          onPointerUp={() => {\n            postToFlip()\n          }}>↖️ FLIP ↗️</Button>\n      </Col>\n      <Col md={5} sm={0} />\n    </Row>\n  )\n  /* eslint-enable jsx-a11y/accessible-emoji */\n}\n\nexport { SensorFlipper }\n","import React, { useState, useEffect } from 'react'\nimport './Indicators.scss'\nimport logger from './logger'\nimport PropTypes from 'prop-types'\nimport useInterval from '@restart/hooks/useInterval'\nimport AsyncClient from 'async-mqtt'\n\nfunction MqttIndicator (props) {\n  const address = props.address\n  const topic = props.topic\n  const emoji = props.emoji\n\n  let [blinking, setBlinking] = useState(false)\n  let [started, setStarted] = useState(false)\n\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe(topic)\n        logger.log('subscribed mqttindicator ' + emoji + ' to topic ' + topic)\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      // blink when a message comes in\n      mqtt.on('message', function () {\n        setBlinking(true)\n      })\n    }\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [address, started, topic, emoji])\n\n  // de-blink the indicator routinely\n  useInterval(() => {\n    setBlinking(false)\n  }, 100)\n\n  return (\n    <div className={blinking ? 'indicator-blink' : 'indicator'}>\n      <span role='img' aria-label='MQTT'>{emoji}</span>\n    </div>\n  )\n}\n\nMqttIndicator.propTypes = {\n  address: PropTypes.string,\n  topic: PropTypes.string,\n  emoji: PropTypes.string\n}\n\nexport { MqttIndicator }\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport Button from 'react-bootstrap/Button'\nimport AsyncClient from 'async-mqtt'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport logger from './logger'\n\nfunction FireTest (props) {\n  const address = props.address\n\n  let [started, setStarted] = useState(false)\n  let [mq, setMq] = useState(null)\n  let [lefty, setLefty] = useState('169')\n\n  useEffect(() => {\n    async function subscribe () {\n      const client = AsyncClient.connect(address)\n      try {\n        await client.subscribe('asOne/console/leftBPM')\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      client.on('message', (_, message) => {\n        if (message == null) return\n        const msgString = message.toString()\n        if (msgString) {\n          setLefty(msgString)\n        }\n      })\n\n      setMq(client)\n    }\n\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [address, mq, started, setLefty])\n\n  function mqttPublish (topic, string) {\n    const mqtt = mq\n    if (mqtt && mqtt.publish) {\n      mqtt.publish(topic, string)\n    }\n  }\n\n  return (\n    <Row>\n      <Col>\n        <Button\n          label='Upper'\n          id='upper-button'\n          onPointerDown={() => {\n          // mqttPublish\n          }}\n          onPointerUp={() => {\n            mqttPublish('asOne/fe/testUpper', '500')\n          }}>Upper ______</Button>\n      </Col>\n      <Col>\n        <Button\n          label='Lower'\n          id='lower-button'\n          onPointerUp={() => {\n            mqttPublish('asOne/fe/testLower', '375')\n          }}>Lower ______</Button>\n      </Col>\n      <Col>\n        <Button\n          label='80 BPM'\n          id='80-bpm-button'\n          onPointerUp={() => {\n            mqttPublish('asOne/fe/doBPM', '80')\n          }}>80 BPM ______</Button>\n      </Col>\n      <Col>\n        <Button\n          label='Left BPM'\n          id='left-bpm-button'\n          onPointerUp={() => {\n            mqttPublish('asOne/fe/doBPM', lefty)\n          }}>Left BPM ({lefty})</Button>\n      </Col>\n      <Col />\n      <Col />\n    </Row>\n  )\n}\n\nFireTest.propTypes = {\n  address: PropTypes.string\n}\n\nexport { FireTest }\n","import React, { useState, useEffect } from 'react'\nimport logger from './logger'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer, Rect } from 'react-konva'\nimport { useCheckedWidth } from './hooks'\nimport scoreboardAddressTable from './scoreboard-lookup.json'\nimport AsyncClient from 'async-mqtt'\n\nconst SCOREBOARD_WIDTH = 31\nconst SCOREBOARD_HEIGHT = 10\nconst GREYISH_BLACK = '#222222'\n\nfunction ScoreboardEmulator (props) {\n  const address = props.address\n\n  let [started, setStarted] = useState(false)\n  let [leds, setLeds] = useState([])\n  let [board, setBoard] = useState([])\n  let [ref, checkedWidth] = useCheckedWidth()\n\n  function _rgbToHex (r, g, b) {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\n  }\n\n  function _locationToKey (x, y) {\n    return 'key_' + x + '_' + y\n  }\n\n  function _pixelSize (divWidth) {\n    return divWidth / SCOREBOARD_WIDTH\n  }\n\n  // Should run only at mount time\n  useEffect(() => {\n    async function subscribe () {\n      const mqtt = AsyncClient.connect(address)\n      try {\n        await mqtt.subscribe('asOne/score/all/direct')\n        logger.log('subscribed scoreboardemulator')\n      } catch (e) {\n        logger.error('error connecting to mqtt')\n        logger.error(e)\n      }\n\n      mqtt.on('message', function (_, message) {\n        setLeds(message)\n      })\n    }\n    if (!started) {\n      subscribe()\n      setStarted(true)\n    }\n  }, [started, address])\n\n  // Runs whenever new raw values are set. Updates the existing screen\n  useEffect(() => {\n    if (leds) {\n      // First, process the incoming rgb values into an array of hex triplets\n      const processedArray = []\n      for (var i = 0; i < leds.length; i += 3) {\n        const brightnessPercentage = (leds[i] + leds[i + 1] + leds[i + 2]) / (255 * 3)\n        // Magic number threshold below which the pixel will be shown as dim grey\n        if (brightnessPercentage > 0.1) {\n          const newColor = _rgbToHex(leds[i], leds[i + 1], leds[i + 2])\n          processedArray.push(newColor)\n        } else {\n          processedArray.push(GREYISH_BLACK)\n        }\n      }\n\n      // Then, use those to update the board\n      const pixelSize = _pixelSize(checkedWidth)\n      processedArray.map(function (value, index) {\n        const x = scoreboardAddressTable[index].x\n        const y = scoreboardAddressTable[index].y\n        const replacement = <Rect\n          x={pixelSize * x}\n          y={pixelSize * y}\n          width={pixelSize}\n          height={pixelSize}\n          fill={value}\n          key={_locationToKey(x, y)} />\n        board[x][y] = replacement\n        return value\n      })\n      setBoard(board)\n    }\n  }, [leds, board, checkedWidth])\n\n  // Runs whenever the screen is resized. Sets the width we're rendering to\n  // and creates a screen using that size\n  useEffect(() => {\n    // using that value, create the board\n    const pixelSize = _pixelSize(checkedWidth)\n    const screen = []\n    for (var i = 0; i < SCOREBOARD_WIDTH; i++) {\n      const column = []\n      for (var j = 0; j < SCOREBOARD_HEIGHT; j++) {\n        const pixel = <Rect x={pixelSize * i} y={pixelSize * j} width={pixelSize} height={pixelSize} fill={GREYISH_BLACK} key={_locationToKey(i, j)} />\n        column.push(pixel)\n      }\n      screen.push(column)\n    }\n    setBoard(screen)\n  }, [checkedWidth])\n\n  return (\n    <div ref={ref}>\n      <Stage width={checkedWidth} height={checkedWidth / 3}>\n        <Layer>\n          { board.flat() }\n        </Layer>\n      </Stage>\n    </div>\n  )\n}\n\nScoreboardEmulator.propTypes = {\n  address: PropTypes.string\n}\n\nexport { ScoreboardEmulator, GREYISH_BLACK }\n","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport logger from './logger'\nimport axios from 'axios'\n\nconst FIRE_PATH = '/game/fire'\n\nfunction Fire () {\n  async function postToFire () {\n    try {\n      const response = await axios.post(FIRE_PATH)\n      logger.log('fired effect: ' + response)\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  return (\n    <Button\n      label='fire'\n      style={{ width: '200px' }}\n      id='fire-button'\n      onPointerUp={() => {\n        postToFire()\n      }}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;i&nbsp;r&nbsp;e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</Button>\n  )\n}\n\nexport { Fire }\n","import React, { useState } from 'react'\nimport 'pepjs'\n\nimport { SensorMonitor } from './SensorMonitor'\nimport { SensorFlipper } from './SensorFlipper'\nimport { MqttIndicator } from './MqttIndicator'\nimport { FireTest } from './FireTest'\nimport { ScoreboardEmulator, GREYISH_BLACK } from './ScoreboardEmulator'\nimport { Fire } from './Fire'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Collapse from 'react-bootstrap/Collapse'\n\nconst mqttAddress = 'ws://' + window.location.hostname + ':8181'\n\nfunction App () {\n  let [scoreboardOpen, setScoreboardOpen] = useState(true)\n  let [sensorMonitorOpen, setSensorMonitorOpen] = useState(true)\n\n  let spacer = <Row style={{ height: '40px' }} />\n\n  return (\n    <div className='App'>\n      <Container fluid='true'>\n        <Row>\n          <Col md={0} lg={1} />\n          <Col md={12} lg={10}>\n            <Navbar expand='lg' variant='dark' bg='dark'>\n              <Navbar.Brand href='#'>As One</Navbar.Brand>\n              <div className='d-flex ml-auto flex-nowrap'>\n                {/* flame effect heartbeat */}\n                <MqttIndicator address={mqttAddress} topic='asOne/fe/heartbeat' emoji='🔥' />\n                <div style={{ width: '10px' }} />\n                {/* scoreboard heartbeat */}\n                <MqttIndicator address={mqttAddress} topic='asOne/score/heartbeat' emoji='📺' />\n                <div style={{ width: '10px' }} />\n                {/* all messages, all topics */}\n                <MqttIndicator address={mqttAddress} topic='asOne/#' emoji='📢' />\n              </div>\n            </Navbar>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        { spacer }\n        <Row>\n          <Col md={0} lg={1} />\n          <Col md={12} lg={10}>\n            <Fire />\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        { spacer }\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <div className='card' style={{ backgroundColor: GREYISH_BLACK }}>\n              <h4 className='card-header'>\n                <a href='#/' onClick={() => setSensorMonitorOpen(!sensorMonitorOpen)}>\n                  Handsets\n                  <span className='float-right'>▼</span>\n                </a>\n              </h4>\n              <Collapse in={sensorMonitorOpen}>\n                <div className='card-body'>\n                  <div className='card-text'>\n                    <SensorMonitor address={mqttAddress} />\n                    { spacer }\n                    <SensorFlipper />\n                  </div>\n                </div>\n              </Collapse>\n            </div>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n        { spacer }\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <div className='card' style={{ backgroundColor: GREYISH_BLACK }}>\n              <h4 className='card-header'>\n                <a href='#/' onClick={() => setScoreboardOpen(!scoreboardOpen)}>\n                Scoreboard\n                  <span className='float-right'>▼</span>\n                </a>\n              </h4>\n              <Collapse in={scoreboardOpen}>\n                <div className='card-body'>\n                  <div className='card-text'><ScoreboardEmulator address={mqttAddress} /></div>\n                </div>\n              </Collapse>\n            </div>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n\n        { spacer }\n\n        <Row>\n          <Col md={0} lg={1} />\n          <Col>\n            <div className='card' style={{ backgroundColor: GREYISH_BLACK }}>\n              <h4 className='card-header'>\n                Fire\n              </h4>\n              <div className='card-body'>\n                <div className='card-text'><FireTest address={mqttAddress} /></div>\n              </div>\n            </div>\n          </Col>\n          <Col md={0} lg={1} />\n        </Row>\n\n        { spacer }\n\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-undef */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// Switch out default bootstrap for the Solar theme -- https://bootswatch.com/solar/\n// import 'bootstrap/dist/css/bootstrap.css'\nimport './bootstrap-solar.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}